generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  profile       Profile?
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id       String   @id @default(cuid())
  biograpy String // Intentional typo!
  userId   String
  p1matches Match[] @relation("p1")
  p2matches Match[] @relation("p2")
  ladders LadderPosition[]
  user     User   @relation(fields: [userId], references: [id])
}

model Match {
    id    Int    @id @default(autoincrement())
    createdAt DateTime
    p1id  String
    p1    Profile   @relation("p1", fields: [p1id], references: [id])
    p2id  String
    p2    Profile   @relation("p2", fields: [p2id], references: [id])
    p1score Int
    p2score Int
    gameid Int
    game   Game @relation(fields: [gameid], references: [id])
}

model Game {
    id Int @id @default(autoincrement())
    slug String
    name String
    officeid Int
    office Office @relation(fields: [officeid], references: [id])
    matches Match[] 
}

model Office {
    id Int @id @default(autoincrement())
    name String
    games Game[]
    slug String @unique @default(uuid())
}

model Ladder {
    id Int @id @default(autoincrement())
    gameid Int
    positions LadderPosition[]
}

model LadderPosition {
    id Int @id @default(autoincrement())
    playerid String
    player Profile @relation(fields: [playerid], references: [id])
    position Int 
    ladderid Int
    ladder Ladder @relation(fields: [ladderid], references: [id])
}